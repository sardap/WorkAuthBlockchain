using Nethereum.Contracts;
using Nethereum.Hex.HexTypes;
using Nethereum.RPC.Eth.DTOs;
using Nethereum.Web3;
using System.Threading.Tasks;

namespace WorkAuthBlockChain
{
	public class RefSharingContract
	{
		public const string ABI = @"[{""constant"":true, ""inputs"":[],""name"":""getData"",""outputs"":[{""name"":"""",""type"":""string""}],""payable"":false,""stateMutability"":""view"",""type"":""function""},{""constant"":false,""inputs"":[{""name"":""appvoed"",""type"":""address""},{""name"":""response"",""type"":""bool""}],""name"":""RespondRequest"",""outputs"":[{""name"":"""",""type"":""bool""}],""payable"":false,""stateMutability"":""nonpayable"",""type"":""function""},{""constant"":true,""inputs"":[{""name"":""toConvert"",""type"":""address""}],""name"":""addressToString"",""outputs"":[{""name"":"""",""type"":""string""}],""payable"":false,""stateMutability"":""view"",""type"":""function""},{""constant"":false,""inputs"":[{""name"":""shared"",""type"":""address""}],""name"":""ShareWithAddress"",""outputs"":[{""name"":"""",""type"":""bool""}],""payable"":false,""stateMutability"":""nonpayable"",""type"":""function""},{""constant"":true,""inputs"":[],""name"":""getShareRecords"",""outputs"":[{""name"":"""",""type"":""string""}],""payable"":false,""stateMutability"":""view"",""type"":""function""},{""inputs"":[{""name"":""data"",""type"":""string""},{""name"":""student"",""type"":""address""}],""payable"":false,""stateMutability"":""nonpayable"",""type"":""constructor""}]";
		public const string BYTE_CODE = "608060405234801561001057600080fd5b50604051610f8a380380610f8a833981018060405281019080805182019291906020018051906020019092919050505081600090805190602001906100569291906100e0565b5033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050610185565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061012157805160ff191683800117855561014f565b8280016001018555821561014f579182015b8281111561014e578251825591602001919060010190610133565b5b50905061015c9190610160565b5090565b61018291905b8082111561017e576000816000905550600101610166565b5090565b90565b610df6806101946000396000f30060806040526004361061006d576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680633bc5de30146100725780635aec3e68146101025780635e57966d146101695780637f0ee04114610225578063c21ab75b14610280575b600080fd5b34801561007e57600080fd5b50610087610310565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156100c75780820151818401526020810190506100ac565b50505050905090810190601f1680156100f45780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561010e57600080fd5b5061014f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035151590602001909291905050506103b2565b604051808215151515815260200191505060405180910390f35b34801561017557600080fd5b506101aa600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506104a8565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101ea5780820151818401526020810190506101cf565b50505050905090810190601f1680156102175780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561023157600080fd5b50610266600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506106bd565b604051808215151515815260200191505060405180910390f35b34801561028c57600080fd5b506102956107d5565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156102d55780820151818401526020810190506102ba565b50505050905090810190601f1680156103025780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b606060008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156103a85780601f1061037d576101008083540402835291602001916103a8565b820191906000526020600020905b81548152906001019060200180831161038b57829003601f168201915b5050505050905090565b600080600090505b6003805490508110156104a1578373ffffffffffffffffffffffffffffffffffffffff166003828154811015156103ed57fe5b906000526020600020906002020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141561049457821561046c57600160038281548110151561045257fe5b906000526020600020906002020160010181905550610493565b600260038281548110151561047d57fe5b9060005260206000209060020201600101819055505b5b80806001019150506103ba565b5092915050565b60608060008060008060286040519080825280601f01601f1916602001820160405280156104e55781602001602082028038833980820191505090505b509450600093505b60148410156106b0578360130360080260020a8773ffffffffffffffffffffffffffffffffffffffff1681151561052057fe5b047f01000000000000000000000000000000000000000000000000000000000000000292506010837f0100000000000000000000000000000000000000000000000000000000000000900460ff1681151561057757fe5b047f0100000000000000000000000000000000000000000000000000000000000000029150817f01000000000000000000000000000000000000000000000000000000000000009004601002837f01000000000000000000000000000000000000000000000000000000000000009004037f01000000000000000000000000000000000000000000000000000000000000000290506106158261087e565b858560020281518110151561062657fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535061065f8161087e565b856001866002020181518110151561067357fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535083806001019450506104ed565b8495505050505050919050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614156107cb57600360408051908101604052808473ffffffffffffffffffffffffffffffffffffffff16815260200160008152509080600181540180825580915050906001820390600052602060002090600202016000909192909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010155505050600190506107d0565b600090505b919050565b60608060008090505b6003805490508110156108765760006003828154811015156107fc57fe5b9060005260206000209060020201600101541415610869576108668261086160038481548110151561082a57fe5b906000526020600020906002020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166104a8565b61096e565b91505b80806001019150506107de565b819250505090565b6000600a7f010000000000000000000000000000000000000000000000000000000000000002827effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916101561091d576030827f01000000000000000000000000000000000000000000000000000000000000009004017f0100000000000000000000000000000000000000000000000000000000000000029050610969565b6057827f01000000000000000000000000000000000000000000000000000000000000009004017f01000000000000000000000000000000000000000000000000000000000000000290505b919050565b60606109ad83836020604051908101604052806000815250602060405190810160405280600081525060206040519081016040528060008152506109b5565b905092915050565b6060806060806060806060806000808e98508d97508c96508b95508a94508451865188518a518c51010101016040519080825280601f01601f191660200182016040528015610a135781602001602082028038833980820191505090505b50935083925060009150600090505b8851811015610ad5578881815181101515610a3957fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000028383806001019450815181101515610a9857fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508080600101915050610a22565b600090505b8751811015610b8d578781815181101515610af157fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000028383806001019450815181101515610b5057fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508080600101915050610ada565b600090505b8651811015610c45578681815181101515610ba957fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000028383806001019450815181101515610c0857fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508080600101915050610b92565b600090505b8551811015610cfd578581815181101515610c6157fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000028383806001019450815181101515610cc057fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508080600101915050610c4a565b600090505b8451811015610db5578481815181101515610d1957fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000028383806001019450815181101515610d7857fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508080600101915050610d02565b829950505050505050505050959450505050505600a165627a7a7230582021e456ca69d2a0cfba04e2df073190c1d489fee389896a34dd96ef44422b89020029";
		public const int LOGIN_TIMEOUT = 60;
		private static readonly HexBigInteger GAS_LIMIT = new HexBigInteger(3000000);

		private Web3 _web3 = new Web3();
		private string _senderAddress;
		private string _senderPassword;
		private string _trasnactionHash;
		private Contract _contract;

		public bool LoadContract(string address)
		{
			_contract = _web3.Eth.GetContract(ABI, address);

			return _contract != null;
		}

		public async Task<bool> UnlockAccount(string address, string password)
		{
			_senderAddress = address;
			_senderPassword = password;

			bool fuckyou = await _web3.Personal.UnlockAccount.SendRequestAsync(_senderAddress, _senderPassword, LOGIN_TIMEOUT);

			return fuckyou;
		}

		public async Task<string> Deploy(string encryptedData, string sharerAddress)
		{
			var test = _web3.Eth.Accounts;

			_trasnactionHash = await _web3.Eth.DeployContract.SendRequestAsync(ABI, BYTE_CODE, _senderAddress, GAS_LIMIT, encryptedData, sharerAddress);

			TransactionReceipt receipt = null;
			while (receipt == null)
			{
				receipt = await _web3.Eth.Transactions.GetTransactionReceipt.SendRequestAsync(_trasnactionHash);
			}

			return receipt.ContractAddress;
		}

		public async Task<string> ExecuteShare(string targetAdress)
		{
			Function shareWithAddress = _contract.GetFunction("ShareWithAddress");

			string transactionHash = await shareWithAddress.SendTransactionAsync(_senderAddress, GAS_LIMIT, new HexBigInteger("0x0"), targetAdress);

			return transactionHash;
		}

		public async Task<string> getShareRecords()
		{
			Function getShareRecordsFunction = _contract.GetFunction("getShareRecords");

			string addresses = await getShareRecordsFunction.CallAsync<string>();

			return addresses;
		}

		public async Task<string> RespondRequest(string address, bool response)
		{
			Function shareWithAddress = _contract.GetFunction("RespondRequest");

			string transactionHash = await shareWithAddress.SendTransactionAsync(_senderAddress, GAS_LIMIT, new HexBigInteger("0x0"), address, response);

			return transactionHash;
		}

		public async Task<string> getData()
		{
			Function getDataFunction = _contract.GetFunction("getData");

			string encyptedData = await getDataFunction.CallAsync<string>();

			return encyptedData;
		}
	}
}